{
  "version": 3,
  "sources": ["../src/main.ts", "../src/settings.ts"],
  "sourcesContent": ["import * as obs from 'obsidian';\nimport SettingsTab from \"./settings.js\";\nimport {BaseComponent} from \"obsidian\";\n\nexport interface Settings {\n\n}\n\nexport const default_settings: Settings = {};\n\nexport type Widget = (ButtonWidget | TextInputWidget | ListBoxWidget) & {\n    id?: WidgetId,\n    label?: string,\n    description?: string,\n};\n\nexport type ButtonWidget = {\n    text: string,\n    icon?: string,\n    onClick: (e: MouseEvent) => void,\n};\n\nexport type TextInputWidget = {\n    getTextContent?: () => string,\n    setTextContent?: (text: string) => void,\n\n    placeholder?: string,\n\n    multiline?: boolean\n}\n\nexport type ListBoxWidget = {\n    listItems: () => {\n        label: string,\n        key?: string\n    }[],\n\n    multiple?: boolean,\n    extend?: boolean\n}\n\nexport type WidgetId = string;\n\nexport default class Form extends obs.Plugin {\n\n    settingsTab: SettingsTab | null = null;\n    settings: Settings = default_settings;\n\n    widgets: Map<WidgetId, { widget: Widget, component: obs.BaseComponent }> = new Map();\n    updateHooks: Array<() => void> = [];\n\n    async onload() {\n        const self = this;\n        this.registerMarkdownCodeBlockProcessor(\"form-control\", function (source, el, ctx) {\n            try {\n                const getId = (widget: Widget): WidgetId => `${self.app.workspace.getActiveFile()?.path ?? '/'}/${widget.id ?? self.widgets.size}`;\n\n                let form;\n                const widget = new Function(\"form\", source)(form = {\n                    createButton(widget: Widget & ButtonWidget) {\n                        const id = getId(widget);\n                        new obs.Setting(el)\n                            .addButton(button => {\n                                self.widgets.set(id, {\n                                    widget,\n                                    component: button\n                                });\n\n                                button.setButtonText(widget.text);\n                                if (widget.icon) button.setIcon(widget.icon);\n\n                                button.onClick(e => widget.onClick?.(e));\n                            })\n                            .setName(widget.label ?? '')\n                            .setDesc(widget.description ?? '');\n                    },\n                    createTextWidget(widget: Widget & TextInputWidget) {\n                        const id = getId(widget);\n                        const cb = function (input: obs.TextComponent | obs.TextAreaComponent) {\n                            self.widgets.set(id, {\n                                widget,\n                                component: input\n                            });\n\n                            if (widget.getTextContent) input.setValue(String(widget.getTextContent()));\n                            input.onChange(value => {\n                                widget.setTextContent?.(value);\n                                self.updateHooks.forEach(i => i());\n                            });\n\n                            if (widget.getTextContent && !widget.setTextContent) {\n                                input.setDisabled(true);\n                                self.updateHooks.push(() => void input.setValue(String(widget.getTextContent!())))\n                            }\n                        };\n\n                        (widget.multiline ? new obs.Setting(el)\n                            .addTextArea(cb) : new obs.Setting(el).addText(cb))\n                            .setName(widget.label ?? '')\n                            .setDesc(widget.description ?? '');\n                    },\n                    query(id: WidgetId): BaseComponent | null {\n                        if (self.widgets.has(id))\n                            return self.widgets.get(id)!.component;\n\n                        const new_id = `${self.app.workspace.getActiveFile()?.path ?? '/'}/${id}`;\n\n                        if (self.widgets.has(new_id))\n                            return self.widgets.get(new_id)!.component;\n\n                        return null;\n                    }\n                });\n            } catch (err) {\n                el.createEl(\"pre\", {\n                    cls: [\"error\"],\n                    text: String(err instanceof Error ? err.stack : err)\n                })\n            }\n        });\n        this.addSettingTab(new SettingsTab(this.app, this));\n    }\n}", "import * as obs from 'obsidian';\n\nexport default class SettingsTab extends obs.PluginSettingTab {\n    display(): void {\n\n    }\n}"],
  "mappings": "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",
  "names": ["obs", "widget"]
}
